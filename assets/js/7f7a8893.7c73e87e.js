"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[188],{6944:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/component-chat-io-8d114bb5279770d2e3bc8250ec6396ed.png"},16878:(e,t,n)=>{n.r(t),n.d(t,{CH:()=>h,assets:()=>l,chCodeConfig:()=>p,contentTitle:()=>i,default:()=>j,frontMatter:()=>d,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"Components/components-io","title":"Input / Output","description":"Langflow\'s Input and Output components define where data enters and exits your flow, but they don\'t have identical functionality.","source":"@site/docs/Components/components-io.mdx","sourceDirName":"Components","slug":"/components-io","permalink":"/components-io","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Input / Output","slug":"/components-io"},"sidebar":"docs","previous":{"title":"Components overview","permalink":"/concepts-components"},"next":{"title":"Agents","permalink":"/components-agents"}}');var o=n(74848),r=n(28453),c=n(24754),a=n(17886);const d={title:"Input / Output",slug:"/components-io"},i=void 0,l={},h={annotations:c.hk,Code:c.Cy},p={staticMediaQuery:"not screen, (max-width: 768px)",lineNumbers:!0,showCopyButton:!0,themeName:"github-dark"},u=[{value:"Chat Input and Output",id:"chat-io",level:2},{value:"Chat Input",id:"chat-input",level:3},{value:"Chat Input parameters",id:"chat-input-parameters",level:4},{value:"Chat Output",id:"chat-output",level:3},{value:"Chat Output parameters",id:"chat-output-parameters",level:4},{value:"Use Chat Input and Output components in a flow",id:"use-chat-input-and-output-components-in-a-flow",level:3},{value:"Send chat input with the Langflow API",id:"send-chat-input-with-the-langflow-api",level:3},{value:"Text Input and Output",id:"text-io",level:2},{value:"Text Input",id:"text-input",level:3},{value:"Text Input parameters",id:"text-input-parameters",level:4},{value:"Text Output",id:"text-output",level:3},{value:"Text Output parameters",id:"text-output-parameters",level:4}];function x(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=t;return h||m("CH",!1),h.Code||m("CH.Code",!0),s||m("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("style",{dangerouslySetInnerHTML:{__html:'[data-ch-theme="github-dark"] {  --ch-t-colorScheme: dark;--ch-t-foreground: #c9d1d9;--ch-t-background: #0d1117;--ch-t-lighter-inlineBackground: #0d1117e6;--ch-t-editor-background: #0d1117;--ch-t-editor-foreground: #c9d1d9;--ch-t-editor-lineHighlightBackground: #6e76811a;--ch-t-editor-rangeHighlightBackground: #ffffff0b;--ch-t-editor-infoForeground: #3794FF;--ch-t-editor-selectionBackground: #264F78;--ch-t-focusBorder: #1f6feb;--ch-t-tab-activeBackground: #0d1117;--ch-t-tab-activeForeground: #c9d1d9;--ch-t-tab-inactiveBackground: #010409;--ch-t-tab-inactiveForeground: #8b949e;--ch-t-tab-border: #30363d;--ch-t-tab-activeBorder: #0d1117;--ch-t-editorGroup-border: #30363d;--ch-t-editorGroupHeader-tabsBackground: #010409;--ch-t-editorLineNumber-foreground: #6e7681;--ch-t-input-background: #0d1117;--ch-t-input-foreground: #c9d1d9;--ch-t-input-border: #30363d;--ch-t-icon-foreground: #8b949e;--ch-t-sideBar-background: #010409;--ch-t-sideBar-foreground: #c9d1d9;--ch-t-sideBar-border: #30363d;--ch-t-list-activeSelectionBackground: #6e768166;--ch-t-list-activeSelectionForeground: #c9d1d9;--ch-t-list-hoverBackground: #6e76811a;--ch-t-list-hoverForeground: #c9d1d9; }'}}),"\n","\n",(0,o.jsxs)(t.p,{children:["Langflow's ",(0,o.jsx)(t.strong,{children:"Input and Output"})," components define where data enters and exits your flow, but they don't have identical functionality."]}),"\n",(0,o.jsxs)(t.p,{children:["Specifically, ",(0,o.jsx)(t.strong,{children:"Chat Input and Output"})," components are designed to facilitate conversational interactions where messages are exchanged in a cumulative dialogue.\nThe data handled by these components includes the message text plus additional metadata like senders, session IDs, and timestamps."]}),"\n",(0,o.jsxs)(t.p,{children:["In contrast, ",(0,o.jsx)(t.strong,{children:"Text Input and Output"})," components are designed for simple string input and output that doesn't require the additional context and metadata associated with chat messages.\nThe data handled by these components is pared down to basic text strings."]}),"\n",(0,o.jsx)(t.h2,{id:"chat-io",children:"Chat Input and Output"}),"\n",(0,o.jsx)(t.admonition,{type:"important",children:(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Chat Input and Output"})," components are required to chat with your flow in the ",(0,o.jsx)(t.strong,{children:"Playground"}),".\nFor more information, see ",(0,o.jsx)(t.a,{href:"/concepts-playground",children:"Test flows in the Playground"}),"."]})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Chat Input and Output"})," components are designed to handle conversational interactions in Langflow."]}),"\n",(0,o.jsx)(t.h3,{id:"chat-input",children:"Chat Input"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component accepts text and file input, such as a chat message or a file.\nThis data is passed to other components as ",(0,o.jsxs)(t.a,{href:"/data-types",children:[(0,o.jsx)(t.code,{children:"Message"})," data"]})," containing the provided input as well as associated chat metadata, such as the sender, session ID, timestamp, and file attachments."]}),"\n",(0,o.jsxs)(t.p,{children:["Initial input should ",(0,o.jsx)(t.em,{children:"not"})," be provided as a complete ",(0,o.jsx)(t.code,{children:"Message"})," object because the ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component constructs the ",(0,o.jsx)(t.code,{children:"Message"})," object that is then passed to other components in the flow."]}),"\n",(0,o.jsx)(t.h4,{id:"chat-input-parameters",children:"Chat Input parameters"}),"\n",(0,o.jsxs)(t.p,{children:["Most ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component input parameters are hidden by default in the visual editor.\nYou can enable other parameters through the ",(0,o.jsx)(a.A,{name:"SlidersHorizontal","aria-hidden":"true"})," ",(0,o.jsx)(t.strong,{children:"Controls"})," in the ",(0,o.jsx)(t.a,{href:"/concepts-components#component-menus",children:"component's header menu"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["For information about the resulting ",(0,o.jsx)(t.code,{children:"Message"})," object, including input parameters that are directly mapped to ",(0,o.jsx)(t.code,{children:"Message"})," attributes, see ",(0,o.jsxs)(t.a,{href:"/data-types#message",children:[(0,o.jsx)(t.code,{children:"Message"})," data"]}),"."]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Input Text"}),(0,o.jsx)(t.td,{children:"Input parameter. The message text string to be passed as input."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender"}),(0,o.jsx)(t.td,{children:"Sender Type"}),(0,o.jsxs)(t.td,{children:["Input parameter. Identifies the sender as either ",(0,o.jsx)(t.code,{children:"User"})," or ",(0,o.jsx)(t.code,{children:"Language Model"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender_name"}),(0,o.jsx)(t.td,{children:"Sender Name"}),(0,o.jsxs)(t.td,{children:["Input parameter. The name of the sender. If unspecified, defaults to ",(0,o.jsx)(t.code,{children:"User"})," or ",(0,o.jsx)(t.code,{children:"Language Model"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"session_id"}),(0,o.jsx)(t.td,{children:"Session ID"}),(0,o.jsx)(t.td,{children:"Input parameter. The unique identifier for the chat session. If empty, the current session ID parameter is used."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"files"}),(0,o.jsx)(t.td,{children:"Files"}),(0,o.jsx)(t.td,{children:"Input parameter. The files to be sent with the message."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"background_color"}),(0,o.jsx)(t.td,{children:"Background Color"}),(0,o.jsx)(t.td,{children:"Input parameter. The background color of the icon."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"chat_icon"}),(0,o.jsx)(t.td,{children:"Icon"}),(0,o.jsx)(t.td,{children:"Input parameter. The icon of the message."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"should_store_message"}),(0,o.jsx)(t.td,{children:"Store Messages"}),(0,o.jsx)(t.td,{children:"Input parameter. Whether to store the message in chat history."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text_color"}),(0,o.jsx)(t.td,{children:"Text Color"}),(0,o.jsx)(t.td,{children:"Input parameter. The text color of the name."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"message"}),(0,o.jsx)(t.td,{children:"Message"}),(0,o.jsxs)(t.td,{children:["Output parameter. The resulting chat ",(0,o.jsx)(t.code,{children:"Message"})," object with all specified properties."]})]})]})]}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)("summary",{children:"Message method for Chat Input"}),(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"ChatInput"})," class provides an asynchronous method to create and store a ",(0,o.jsx)(t.code,{children:"Message"})," object based on the input parameters.\nThe ",(0,o.jsx)(t.code,{children:"Message"})," object is created in the ",(0,o.jsx)(t.code,{children:"message_response"})," method of the ",(0,o.jsx)(t.code,{children:"ChatInput"})," class using the ",(0,o.jsx)(t.code,{children:"Message.create()"})," factory method."]}),(0,o.jsx)(h.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"message ",props:{style:{color:"#C9D1D9"}}},{content:"= await",props:{style:{color:"#FF7B72"}}},{content:" Message.create(",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    text",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".input_value,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    sender",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".sender,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    sender_name",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".sender_name,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    session_id",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".session_id,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    files",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"self",props:{style:{color:"#79C0FF"}}},{content:".files,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    properties",props:{style:{color:"#FFA657"}}},{content:"=",props:{style:{color:"#FF7B72"}}},{content:"{",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:'        "background_color"',props:{style:{color:"#A5D6FF"}}},{content:": background_color,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:'        "text_color"',props:{style:{color:"#A5D6FF"}}},{content:": text_color,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:'        "icon"',props:{style:{color:"#A5D6FF"}}},{content:": icon,",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:"    },",props:{style:{color:"#C9D1D9"}}}]},{tokens:[{content:")",props:{style:{color:"#C9D1D9"}}}]}],lang:"python"},annotations:[]}]})]}),"\n",(0,o.jsx)(t.h3,{id:"chat-output",children:"Chat Output"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Chat Output"})," component ingests ",(0,o.jsx)(t.code,{children:"Message"}),", ",(0,o.jsx)(t.code,{children:"Data"}),", or ",(0,o.jsx)(t.code,{children:"DataFrame"})," data from other components, transforms it into ",(0,o.jsx)(t.code,{children:"Message"})," data if needed, and then emits the final output as a chat message.\nFor information about these data types, see ",(0,o.jsx)(t.a,{href:"/data-types",children:"Use Langflow data types"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["In the ",(0,o.jsx)(t.strong,{children:"Playground"}),", chat output is limited to the parts of the ",(0,o.jsx)(t.code,{children:"Message"})," object that are relevant to the chat interface, such as the text response, sender name, and file attachments.\nTo see the metadata associated with a chat message, inspect the message logs in the ",(0,o.jsx)(t.strong,{children:"Playground"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["When using the Langflow API, the API response includes the ",(0,o.jsx)(t.strong,{children:"Chat Output"})," ",(0,o.jsx)(t.code,{children:"Message"})," object along with other response data from the flow run.\nLangflow API responses can be extremely verbose, so your applications must include code to extract relevant data from the response to return to the user.\nFor an example, see the ",(0,o.jsx)(t.a,{href:"/get-started-quickstart",children:"Langflow quickstart"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"chat-output-parameters",children:"Chat Output parameters"}),"\n",(0,o.jsxs)(t.p,{children:["Most ",(0,o.jsx)(t.strong,{children:"Chat Output"})," component input parameters are hidden by default in the visual editor.\nYou can enable them through the ",(0,o.jsx)(a.A,{name:"SlidersHorizontal","aria-hidden":"true"})," ",(0,o.jsx)(t.strong,{children:"Controls"})," in the ",(0,o.jsx)(t.a,{href:"/concepts-components#component-menus",children:"component's header menu"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["For information about the resulting ",(0,o.jsx)(t.code,{children:"Message"})," object, including input parameters that are directly mapped to ",(0,o.jsx)(t.code,{children:"Message"})," attributes, see ",(0,o.jsxs)(t.a,{href:"/data-types#message",children:[(0,o.jsx)(t.code,{children:"Message"})," data"]}),"."]}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Inputs"}),(0,o.jsx)(t.td,{children:"Input parameter. The message text string to be passed as output."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"should_store_message"}),(0,o.jsx)(t.td,{children:"Store Messages"}),(0,o.jsx)(t.td,{children:"Input parameter. Whether to store the message in chat history."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender"}),(0,o.jsx)(t.td,{children:"Sender Type"}),(0,o.jsxs)(t.td,{children:["Input parameter. Identifies the sender as either ",(0,o.jsx)(t.code,{children:"User"})," or ",(0,o.jsx)(t.code,{children:"Language Model"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"sender_name"}),(0,o.jsx)(t.td,{children:"Sender Name"}),(0,o.jsxs)(t.td,{children:["Input parameter. The name of the sender. If unspecified, defaults to ",(0,o.jsx)(t.code,{children:"User"})," or ",(0,o.jsx)(t.code,{children:"Language Model"}),"."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"session_id"}),(0,o.jsx)(t.td,{children:"Session ID"}),(0,o.jsx)(t.td,{children:"Input parameter. The unique identifier for the chat session. If empty, the current session ID parameter is used."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"data_template"}),(0,o.jsx)(t.td,{children:"Data Template"}),(0,o.jsxs)(t.td,{children:["Input parameter. The template to convert ",(0,o.jsxs)(t.a,{href:"/data-types#data",children:[(0,o.jsx)(t.code,{children:"Data"})," input"]})," to ",(0,o.jsx)(t.code,{children:"text"}),". If empty, it is dynamically set to the ",(0,o.jsx)(t.code,{children:"Data"})," object's ",(0,o.jsx)(t.code,{children:"text"})," key."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"background_color"}),(0,o.jsx)(t.td,{children:"Background Color"}),(0,o.jsx)(t.td,{children:"Input parameter. The background color of the icon."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"chat_icon"}),(0,o.jsx)(t.td,{children:"Icon"}),(0,o.jsx)(t.td,{children:"Input parameter. The icon of the message."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text_color"}),(0,o.jsx)(t.td,{children:"Text Color"}),(0,o.jsx)(t.td,{children:"Input parameter. The text color of the name."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"clean_data"}),(0,o.jsx)(t.td,{children:"Basic Clean Data"}),(0,o.jsxs)(t.td,{children:["Input parameter. When enabled, ",(0,o.jsxs)(t.a,{href:"/data-types#dataframe",children:[(0,o.jsx)(t.code,{children:"DataFrame"})," input"]})," is cleaned when converted to text. Cleaning removes empty rows, empty lines in cells, and multiple newlines."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"message"}),(0,o.jsx)(t.td,{children:"Message"}),(0,o.jsxs)(t.td,{children:["Output parameter. The resulting chat ",(0,o.jsx)(t.code,{children:"Message"})," object with all specified properties."]})]})]})]}),"\n",(0,o.jsx)(t.h3,{id:"use-chat-input-and-output-components-in-a-flow",children:"Use Chat Input and Output components in a flow"}),"\n",(0,o.jsxs)(t.p,{children:["To use the ",(0,o.jsx)(t.strong,{children:"Chat Input"})," and ",(0,o.jsx)(t.strong,{children:"Chat Output"})," components in a flow, connect them to components that accept or emit ",(0,o.jsxs)(t.a,{href:"/data-types#message",children:[(0,o.jsx)(t.code,{children:"Message"})," data"]}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["For example, the following flow connects ",(0,o.jsx)(t.strong,{children:"Chat Input"})," and ",(0,o.jsx)(t.strong,{children:"Chat Output"})," to a ",(0,o.jsx)(t.strong,{children:"Language Model"})," component, creating a simple LLM-based chat flow."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Chat Input and Output components connected to an OpenAI component",src:n(6944).A+"",width:"3548",height:"1944"})}),"\n",(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsxs)(t.p,{children:["For detailed examples of ",(0,o.jsx)(t.strong,{children:"Chat Input and Output"})," components in flows, see the following:"]}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/get-started-quickstart",children:"Langflow quickstart"}),": Create and run a basic agent flow."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Basic Prompting"})," template: Create an LLM-based chat flow that accepts chat input as well as a prompt with additional instructions for the LLM. Many other Langflow templates also use ",(0,o.jsx)(t.strong,{children:"Chat Input and Output"})," components."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.a,{href:"/agent-tutorial",children:"Connect applications to agents"}),": Explore more advanced concepts around agent flows and prompting, including triggering agent flows from external applications."]}),"\n"]})]}),"\n",(0,o.jsx)(t.h3,{id:"send-chat-input-with-the-langflow-api",children:"Send chat input with the Langflow API"}),"\n",(0,o.jsxs)(t.p,{children:["You can use the Langflow API to run a flow by sending input to a ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component:"]}),"\n",(0,o.jsx)(h.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"curl ",props:{style:{color:"#FFA657"}}},{content:"--request ",props:{style:{color:"#79C0FF"}}},{content:"POST ",props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --url ",props:{style:{color:"#79C0FF"}}},{content:'"http://',props:{style:{color:"#A5D6FF"}}},{content:"$LANGFLOW_SERVER_ADDRESS",props:{style:{color:"#C9D1D9"}}},{content:"/api/v1/run/",props:{style:{color:"#A5D6FF"}}},{content:"$FLOW_ID",props:{style:{color:"#C9D1D9"}}},{content:'" ',props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --header ",props:{style:{color:"#79C0FF"}}},{content:'"Content-Type: application/json" ',props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --header ",props:{style:{color:"#79C0FF"}}},{content:'"x-api-key: ',props:{style:{color:"#A5D6FF"}}},{content:"$LANGFLOW_API_KEY",props:{style:{color:"#C9D1D9"}}},{content:'" ',props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --data ",props:{style:{color:"#79C0FF"}}},{content:"'{",props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:'  "input_value": "What\'s the recommended way to install Docker on Mac M1?",',props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:'  "output_type": "chat",',props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:'  "input_type": "chat"',props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:"}'",props:{style:{color:"#A5D6FF"}}}]}],lang:"bash"},annotations:[]}]}),"\n",(0,o.jsxs)(t.p,{children:["When triggering flows with the Langflow API, the payload must contain the values for the ",(0,o.jsx)(t.strong,{children:"Chat Input"})," component's input parameters, such as ",(0,o.jsx)(t.code,{children:"input_value"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["Not all parameters need to be specified in the request.\nFor example, ",(0,o.jsx)(t.code,{children:"session_id"})," uses the flow's default session ID if omitted.\nIf you want to use a custom session ID, include ",(0,o.jsx)(t.code,{children:"session_id"})," in your request:"]}),"\n",(0,o.jsx)(h.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"curl ",props:{style:{color:"#FFA657"}}},{content:"--request ",props:{style:{color:"#79C0FF"}}},{content:"POST ",props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --url ",props:{style:{color:"#79C0FF"}}},{content:'"http://',props:{style:{color:"#A5D6FF"}}},{content:"$LANGFLOW_SERVER_ADDRESS",props:{style:{color:"#C9D1D9"}}},{content:"/api/v1/run/",props:{style:{color:"#A5D6FF"}}},{content:"$FLOW_ID",props:{style:{color:"#C9D1D9"}}},{content:'" ',props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --header ",props:{style:{color:"#79C0FF"}}},{content:'"Content-Type: application/json" ',props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --header ",props:{style:{color:"#79C0FF"}}},{content:'"x-api-key: ',props:{style:{color:"#A5D6FF"}}},{content:"$LANGFLOW_API_KEY",props:{style:{color:"#C9D1D9"}}},{content:'" ',props:{style:{color:"#A5D6FF"}}},{content:"\\",props:{style:{color:"#79C0FF"}}}]},{tokens:[{content:"  --data ",props:{style:{color:"#79C0FF"}}},{content:"'{",props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:'  "input_value": "Whats the recommended way to install Docker on Mac M1",',props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:'  "session_id": "$USER_ID",',props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:'  "output_type": "chat",',props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:'  "input_type": "chat"',props:{style:{color:"#A5D6FF"}}}]},{tokens:[{content:"}'",props:{style:{color:"#A5D6FF"}}}]}],lang:"bash"},annotations:[]}]}),"\n",(0,o.jsxs)(t.p,{children:["For more information, see ",(0,o.jsx)(t.a,{href:"/concepts-publish",children:"Trigger flows with the Langflow API"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"text-io",children:"Text Input and Output"}),"\n",(0,o.jsxs)(t.admonition,{type:"important",children:[(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Text Input and Output"})," components aren't supported in the ",(0,o.jsx)(t.strong,{children:"Playground"}),".\nBecause the data isn't formatted as a chat message, the data doesn't appear in the ",(0,o.jsx)(t.strong,{children:"Playground"}),", and you can't chat with your flow in the ",(0,o.jsx)(t.strong,{children:"Playground"}),"."]}),(0,o.jsxs)(t.p,{children:["If you want to chat with a flow in the ",(0,o.jsx)(t.strong,{children:"Playground"}),", you must use the ",(0,o.jsxs)(t.a,{href:"#chat-io",children:[(0,o.jsx)(t.strong,{children:"Chat Input and Output"})," components"]}),"."]})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Text Input and Output"})," components are designed for flows that ingest or emit simple text strings.\nThese components don't support full conversational interactions."]}),"\n",(0,o.jsxs)(t.p,{children:["Passing chat-like metadata to a ",(0,o.jsx)(t.strong,{children:"Text Input and Output"})," component doesn't change the component's behavior; the result is still a simple text string."]}),"\n",(0,o.jsx)(t.h3,{id:"text-input",children:"Text Input"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Text Input"})," component accepts a text string input that is passed to other components as ",(0,o.jsxs)(t.a,{href:"/data-types",children:[(0,o.jsx)(t.code,{children:"Message"})," data"]})," containing only the provided text string."]}),"\n",(0,o.jsxs)(t.p,{children:["Initial input should ",(0,o.jsx)(t.em,{children:"not"})," be provided as a complete ",(0,o.jsx)(t.code,{children:"Message"})," object because the ",(0,o.jsx)(t.strong,{children:"Text Input"})," component constructs the ",(0,o.jsx)(t.code,{children:"Message"})," object that is then passed to other components in the flow."]}),"\n",(0,o.jsx)(t.h4,{id:"text-input-parameters",children:"Text Input parameters"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsxs)(t.td,{children:["Input parameter. Text supplied as input to the component. Can be entered directly or passed as ",(0,o.jsx)(t.code,{children:"Message"})," data from other components."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsxs)(t.td,{children:["Output parameter. The resulting ",(0,o.jsx)(t.code,{children:"Message"})," object containing the input text in the ",(0,o.jsx)(t.code,{children:"text"})," attribute."]})]})]})]}),"\n",(0,o.jsx)(t.h3,{id:"text-output",children:"Text Output"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Text Output"})," component ingests ",(0,o.jsxs)(t.a,{href:"/data-types#message",children:[(0,o.jsx)(t.code,{children:"Message"})," data"]})," from other components, emitting only the ",(0,o.jsx)(t.code,{children:"text"})," attribute in a simplified ",(0,o.jsx)(t.code,{children:"Message"})," object."]}),"\n",(0,o.jsx)(t.h4,{id:"text-output-parameters",children:"Text Output parameters"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Name"}),(0,o.jsx)(t.th,{children:"Display Name"}),(0,o.jsx)(t.th,{children:"Info"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"input_value"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsxs)(t.td,{children:["Input parameter. Text to be ingested and output as a string. Can be entered directly or passed as ",(0,o.jsx)(t.code,{children:"Message"})," data from other components."]})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"text"}),(0,o.jsx)(t.td,{children:"Text"}),(0,o.jsxs)(t.td,{children:["Output parameter. The resulting ",(0,o.jsx)(t.code,{children:"Message"})," object containing the output text in the ",(0,o.jsx)(t.code,{children:"text"})," attribute."]})]})]})]})]})}function j(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}function m(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},17886:(e,t,n)=>{n.d(t,{A:()=>r});n(96540);var s=n(64058),o=n(74848);function r({name:e,...t}){const n=s[e];return n?(0,o.jsx)(n,{...t}):null}}}]);