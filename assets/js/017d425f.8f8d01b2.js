"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[2360],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(96540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}},45033:(e,t,n)=>{n.r(t),n.d(t,{CH:()=>d,assets:()=>l,chCodeConfig:()=>h,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"Components/components-prompts","title":"Prompt Template","description":"Use the Prompt Template core component to create a prompt that supplies instructions and context to an LLM or agent, separate from other input like chat messages and file uploads.","source":"@site/docs/Components/components-prompts.mdx","sourceDirName":"Components","slug":"/components-prompts","permalink":"/components-prompts","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Prompt Template","slug":"/components-prompts"},"sidebar":"docs","previous":{"title":"Processing components","permalink":"/components-processing"},"next":{"title":"Logic","permalink":"/components-logic"}}');var r=n(74848),s=n(28453),i=n(24754);const a={title:"Prompt Template",slug:"/components-prompts"},c=void 0,l={},d={annotations:i.hk,Code:i.Cy},h={staticMediaQuery:"not screen, (max-width: 768px)",lineNumbers:!0,showCopyButton:!0,themeName:"github-dark"},p=[{value:"Prompt Template parameters",id:"prompt-template-parameters",level:2},{value:"Define variables in prompts",id:"define-variables-in-prompts",level:2},{value:"See also",id:"see-also",level:2}];function m(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return d||x("CH",!1),d.Code||x("CH.Code",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("style",{dangerouslySetInnerHTML:{__html:'[data-ch-theme="github-dark"] {  --ch-t-colorScheme: dark;--ch-t-foreground: #c9d1d9;--ch-t-background: #0d1117;--ch-t-lighter-inlineBackground: #0d1117e6;--ch-t-editor-background: #0d1117;--ch-t-editor-foreground: #c9d1d9;--ch-t-editor-lineHighlightBackground: #6e76811a;--ch-t-editor-rangeHighlightBackground: #ffffff0b;--ch-t-editor-infoForeground: #3794FF;--ch-t-editor-selectionBackground: #264F78;--ch-t-focusBorder: #1f6feb;--ch-t-tab-activeBackground: #0d1117;--ch-t-tab-activeForeground: #c9d1d9;--ch-t-tab-inactiveBackground: #010409;--ch-t-tab-inactiveForeground: #8b949e;--ch-t-tab-border: #30363d;--ch-t-tab-activeBorder: #0d1117;--ch-t-editorGroup-border: #30363d;--ch-t-editorGroupHeader-tabsBackground: #010409;--ch-t-editorLineNumber-foreground: #6e7681;--ch-t-input-background: #0d1117;--ch-t-input-foreground: #c9d1d9;--ch-t-input-border: #30363d;--ch-t-icon-foreground: #8b949e;--ch-t-sideBar-background: #010409;--ch-t-sideBar-foreground: #c9d1d9;--ch-t-sideBar-border: #30363d;--ch-t-list-activeSelectionBackground: #6e768166;--ch-t-list-activeSelectionForeground: #c9d1d9;--ch-t-list-hoverBackground: #6e76811a;--ch-t-list-hoverForeground: #c9d1d9; }'}}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," core component to create a ",(0,r.jsx)(t.em,{children:"prompt"})," that supplies instructions and context to an LLM or agent, separate from other input like chat messages and file uploads."]}),"\n",(0,r.jsx)(t.p,{children:"Prompts are structured input that use natural language, fixed values, and dynamic variables to provide baseline context for the LLM.\nFor example:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Define a consistent structure for user queries, making it easier for the LLM to understand and respond appropriately."}),"\n",(0,r.jsx)(t.li,{children:"Define a specific output format for the LLM, such as JSON or structured text."}),"\n",(0,r.jsxs)(t.li,{children:["Define a role for the LLM, such as ",(0,r.jsx)(t.code,{children:"You are a helpful assistant"})," or ",(0,r.jsx)(t.code,{children:"You are an expert in microbiology"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Allow the LLM to reference chat memory."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," component can also output variable instructions to other components later in the flow."]}),"\n",(0,r.jsx)(t.h2,{id:"prompt-template-parameters",children:"Prompt Template parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Display Name"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"template"}),(0,r.jsx)(t.td,{children:"Template"}),(0,r.jsxs)(t.td,{children:["Input parameter. Create a prompt template with dynamic variables (",(0,r.jsx)(t.code,{children:"{VARIABLE_NAME}"}),")."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"prompt"}),(0,r.jsx)(t.td,{children:"Prompt Message"}),(0,r.jsxs)(t.td,{children:["Output parameter. The built prompt message returned by the ",(0,r.jsx)(t.code,{children:"build_prompt"})," method."]})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"define-variables-in-prompts",children:"Define variables in prompts"}),"\n",(0,r.jsxs)(t.p,{children:["Variables in a ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," component dynamically add fields to the ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," component so that your flow can receive definitions for those values from other components, Langflow global variables, or fixed input."]}),"\n",(0,r.jsxs)(t.p,{children:["For example, with the ",(0,r.jsxs)(t.a,{href:"/components-helpers#message-history",children:[(0,r.jsx)(t.strong,{children:"Message History"})," component"]}),", you can use a ",(0,r.jsx)(t.code,{children:"{memory}"})," variable to pass chat history to the prompt.\nHowever, the ",(0,r.jsx)(t.strong,{children:"Agent"})," component includes built-in chat memory that is enabled by default.\nFor more information, see ",(0,r.jsx)(t.a,{href:"/memory",children:"Memory management options"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["The following steps demonstrate how to add variables to a ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," component:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Create a flow based on the ",(0,r.jsx)(t.strong,{children:"Basic prompting"})," template."]}),"\n",(0,r.jsxs)(t.p,{children:["This template already has a ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," component, but the template only contains natural language instructions: ",(0,r.jsx)(t.code,{children:"Answer the user as if you were a GenAI expert, enthusiastic about helping them get started building something fresh."})]}),"\n",(0,r.jsx)(t.p,{children:"This prompt defines a role for the LLM's chat interactions, but it doesn't include variables that help you create prompts that adapt dynamically to changing contexts, such as different users and environments."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Click the ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," component, and then add some variables to the ",(0,r.jsx)(t.strong,{children:"Template"})," field."]}),"\n",(0,r.jsxs)(t.p,{children:["Variables are declared by wrapping the variable name in curly braces, like ",(0,r.jsx)(t.code,{children:"{variable_name}"}),".\nFor example, the following template creates ",(0,r.jsx)(t.code,{children:"context"})," and ",(0,r.jsx)(t.code,{children:"user_question"})," variables:"]}),"\n",(0,r.jsx)(d.Code,{codeConfig:h,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"Given the context:",props:{}}]},{tokens:[{content:"",props:{}}]},{tokens:[{content:"{context}",props:{}}]},{tokens:[{content:"",props:{}}]},{tokens:[{content:"Answer the question:",props:{}}]},{tokens:[{content:"",props:{}}]},{tokens:[{content:"{user_question}",props:{}}]}],lang:"text"},annotations:[]}]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Click ",(0,r.jsx)(t.strong,{children:"Check & Save"})," to save the template."]}),"\n",(0,r.jsxs)(t.p,{children:["After adding the variables to the template, new fields are added to the ",(0,r.jsx)(t.strong,{children:"Prompt Template"})," component for each variable."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Provide input for the variable fields:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Connect the fields to other components to pass the output from those components to the variables."}),"\n",(0,r.jsx)(t.li,{children:"Use Langflow global variables."}),"\n",(0,r.jsx)(t.li,{children:"Enter fixed values directly into the fields."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["You can add as many variables as you like in your template.\nFor example, you could add variables for ",(0,r.jsx)(t.code,{children:"{references}"})," and ",(0,r.jsx)(t.code,{children:"{instructions}"}),", and then feed that information in from other components, such as ",(0,r.jsx)(t.strong,{children:"Text Input"}),", ",(0,r.jsx)(t.strong,{children:"URL"}),", or ",(0,r.jsx)(t.strong,{children:"File"})," components."]}),"\n",(0,r.jsx)(t.h2,{id:"see-also",children:"See also"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.a,{href:"/bundles-langchain#prompt-hub",children:[(0,r.jsx)(t.strong,{children:"LangChain Prompt Hub"})," component"]})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsxs)(t.a,{href:"/components-processing",children:[(0,r.jsx)(t.strong,{children:"Processing"})," components"]})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}function x(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);