"use strict";(self.webpackChunklangflow_docs=self.webpackChunklangflow_docs||[]).push([[6311],{17886:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var o=t(64058),s=t(74848);function r({name:e,...n}){const t=o[e];return t?(0,s.jsx)(t,{...n}):null}},24770:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/agent-example-add-chat-0fec77d5cd551fa755eb013c7aa5e1f0.png"},65535:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/agent-example-add-tools-a55635c0c740ce8a71bd7f1ecef2736f.png"},67800:(e,n,t)=>{t.r(n),t.d(n,{CH:()=>h,assets:()=>d,chCodeConfig:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"Agents/agents","title":"Use Langflow agents","description":"Langflow\'s Agent component is critical for building agent flows.","source":"@site/docs/Agents/agents.mdx","sourceDirName":"Agents","slug":"/agents","permalink":"/agents","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Use Langflow agents","slug":"/agents"},"sidebar":"docs","previous":{"title":"Import and export flows","permalink":"/concepts-flows-import"},"next":{"title":"Configure tools for agents","permalink":"/agents-tools"}}');var s=t(74848),r=t(28453),a=t(24754),i=t(17886);const l={title:"Use Langflow agents",slug:"/agents"},c=void 0,d={},h={annotations:a.hk,Code:a.Cy},p={staticMediaQuery:"not screen, (max-width: 768px)",lineNumbers:!0,showCopyButton:!0,themeName:"github-dark"},g=[{value:"Use the Agent component in a flow",id:"use-the-agent-component-in-a-flow",level:2},{value:"Agent component parameters",id:"agent-component-parameters",level:2},{value:"Provider and model",id:"provider-and-model",level:3},{value:"Model provider API key",id:"model-provider-api-key",level:3},{value:"Agent instructions and input",id:"agent-instructions-and-input",level:3},{value:"Tools",id:"tools",level:3},{value:"Agent memory",id:"agent-memory",level:3},{value:"Additional parameters",id:"additional-parameters",level:3},{value:"Agent component output",id:"agent-component-output",level:2},{value:"See also",id:"see-also",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:o}=n;return h||x("CH",!1),h.Code||x("CH.Code",!0),o||x("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("style",{dangerouslySetInnerHTML:{__html:'[data-ch-theme="github-dark"] {  --ch-t-colorScheme: dark;--ch-t-foreground: #c9d1d9;--ch-t-background: #0d1117;--ch-t-lighter-inlineBackground: #0d1117e6;--ch-t-editor-background: #0d1117;--ch-t-editor-foreground: #c9d1d9;--ch-t-editor-lineHighlightBackground: #6e76811a;--ch-t-editor-rangeHighlightBackground: #ffffff0b;--ch-t-editor-infoForeground: #3794FF;--ch-t-editor-selectionBackground: #264F78;--ch-t-focusBorder: #1f6feb;--ch-t-tab-activeBackground: #0d1117;--ch-t-tab-activeForeground: #c9d1d9;--ch-t-tab-inactiveBackground: #010409;--ch-t-tab-inactiveForeground: #8b949e;--ch-t-tab-border: #30363d;--ch-t-tab-activeBorder: #0d1117;--ch-t-editorGroup-border: #30363d;--ch-t-editorGroupHeader-tabsBackground: #010409;--ch-t-editorLineNumber-foreground: #6e7681;--ch-t-input-background: #0d1117;--ch-t-input-foreground: #c9d1d9;--ch-t-input-border: #30363d;--ch-t-icon-foreground: #8b949e;--ch-t-sideBar-background: #010409;--ch-t-sideBar-foreground: #c9d1d9;--ch-t-sideBar-border: #30363d;--ch-t-list-activeSelectionBackground: #6e768166;--ch-t-list-activeSelectionForeground: #c9d1d9;--ch-t-list-hoverBackground: #6e76811a;--ch-t-list-hoverForeground: #c9d1d9; }'}}),"\n","\n",(0,s.jsxs)(n.p,{children:["Langflow's ",(0,s.jsxs)(n.a,{href:"/components-agents",children:[(0,s.jsx)(n.strong,{children:"Agent"})," component"]})," is critical for building agent flows.\nThis component provides everything you need to create an agent, including multiple Large Language Model (LLM) providers, tool calling, and custom instructions.\nIt simplifies agent configuration so you can focus on application development."]}),"\n",(0,s.jsxs)(o,{children:[(0,s.jsx)("summary",{children:"How do agents work?"}),(0,s.jsxs)(n.p,{children:["Agents extend LLMs by integrating ",(0,s.jsx)(n.em,{children:"tools"}),", which are functions that provide additional context and enable autonomous task execution.\nThese integrations make agents more specialized and powerful than standalone LLMs."]}),(0,s.jsx)(n.p,{children:"Whereas an LLM might generate acceptable, inert responses to general queries and tasks, an agent can leverage the integrated context and tools to provide more relevant responses and even take action.\nFor example, you might create an agent that can access your company's knowledge base, repositories, and other resources to help your team with tasks that require knowledge of your specific products, customers, and code."}),(0,s.jsx)(n.p,{children:"Agents use LLMs as a reasoning engine to process input, determine which actions to take to address the query, and then generate a response.\nThe response could be a typical text-based LLM response, or it could involve an action, like editing a file, running a script, or calling an external API."}),(0,s.jsxs)(n.p,{children:["In an agentic context, tools are functions that the agent can run to perform tasks or access external resources.\nA function is wrapped as a ",(0,s.jsx)(n.code,{children:"Tool"})," object with a common interface that the agent understands.\nAgents become aware of tools through tool registration, which is when the agent is provided a list of available tools typically at agent initialization.\nThe ",(0,s.jsx)(n.code,{children:"Tool"})," object's description tells the agent what the tool can do so that it can decide whether the tool is appropriate for a given request."]})]}),"\n",(0,s.jsx)(n.h2,{id:"use-the-agent-component-in-a-flow",children:"Use the Agent component in a flow"}),"\n",(0,s.jsxs)(n.p,{children:["The following steps explain how to create an agent flow in Langflow from a blank flow.\nFor a prebuilt example, use the ",(0,s.jsx)(n.strong,{children:"Simple Agent"})," template or the ",(0,s.jsx)(n.a,{href:"/get-started-quickstart",children:"Langflow quickstart"}),"."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Click ",(0,s.jsx)(n.strong,{children:"New Flow"}),", and then click ",(0,s.jsx)(n.strong,{children:"Blank Flow"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add an ",(0,s.jsx)(n.strong,{children:"Agent"})," component to your flow."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Enter a valid OpenAI API key."}),"\n",(0,s.jsxs)(n.p,{children:["The default model for the ",(0,s.jsx)(n.strong,{children:"Agent"})," component is an OpenAI model.\nIf you want to use a different provider, edit the ",(0,s.jsx)(n.strong,{children:"Model Provider"}),", ",(0,s.jsx)(n.strong,{children:"Model Name"}),", and ",(0,s.jsx)(n.strong,{children:"API Key"})," fields accordingly.\nFor more information, see ",(0,s.jsx)(n.a,{href:"#agent-component-parameters",children:"Agent component parameters"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsxs)(n.a,{href:"/components-io",children:[(0,s.jsx)(n.strong,{children:"Chat Input"})," and ",(0,s.jsx)(n.strong,{children:"Chat Output"})," components"]})," to your flow, and then connect them to the ",(0,s.jsx)(n.strong,{children:"Agent"})," component."]}),"\n",(0,s.jsxs)(n.p,{children:["At this point, you have created a basic LLM-based chat flow that you can test in the ",(0,s.jsx)(i.A,{name:"Play","aria-hidden":"true"})," ",(0,s.jsx)(n.strong,{children:"Playground"}),".\nHowever, this flow only chats with the LLM.\nTo enhance this flow and make it truly agentic, add some tools, as explained in the next steps."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"A basic agent chat flow with Chat Input, Agent, and Chat Output components.",src:t(24770).A+"",width:"3704",height:"2572"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsx)(n.strong,{children:"News Search"}),", ",(0,s.jsx)(n.strong,{children:"URL"}),", and ",(0,s.jsx)(n.strong,{children:"Calculator"})," components to your flow."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Enable ",(0,s.jsx)(n.strong,{children:"Tool Mode"})," in the ",(0,s.jsx)(n.strong,{children:"News Search"}),", ",(0,s.jsx)(n.strong,{children:"URL"}),", and ",(0,s.jsx)(n.strong,{children:"Calculator"})," components:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Click the ",(0,s.jsx)(n.strong,{children:"News Search"})," component to expose the ",(0,s.jsx)(n.a,{href:"/concepts-components#component-menus",children:"component's header menu"}),", and then enable ",(0,s.jsx)(n.strong,{children:"Tool Mode"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Repeat for the ",(0,s.jsx)(n.strong,{children:"URL"})," and ",(0,s.jsx)(n.strong,{children:"Calculator"})," components."]}),"\n",(0,s.jsxs)(n.li,{children:["Connect the ",(0,s.jsx)(n.strong,{children:"Toolset"})," port for each tool component to the ",(0,s.jsx)(n.strong,{children:"Tools"})," port on the ",(0,s.jsx)(n.strong,{children:"Agent"})," component."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Tool Mode"})," makes a component into a tool by modifying the component's inputs.\nWith ",(0,s.jsx)(n.strong,{children:"Tool Mode"})," enabled, a component can accept requests from an ",(0,s.jsx)(n.strong,{children:"Agent"})," component to use the component's available actions as tools."]}),"\n",(0,s.jsxs)(n.p,{children:["When in ",(0,s.jsx)(n.strong,{children:"Tool Mode"}),", a component has a ",(0,s.jsx)(n.strong,{children:"Toolset"})," port that you must connect to an ",(0,s.jsx)(n.strong,{children:"Agent"})," component's ",(0,s.jsx)(n.strong,{children:"Tools"})," port if you want to allow the agent to use that component's actions as tools."]}),"\n",(0,s.jsxs)(n.p,{children:["For more information, see ",(0,s.jsx)(n.a,{href:"/agents-tools",children:"Configure tools for agents"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"A more complex agent chat flow where three components are connected to the Agent component as tools",src:t(65535).A+"",width:"3380",height:"3012"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(i.A,{name:"Play","aria-hidden":"true"})," ",(0,s.jsx)(n.strong,{children:"Playground"}),", and then ask the agent, ",(0,s.jsx)(n.code,{children:"What tools are you using to answer my questions?"})]}),"\n",(0,s.jsx)(n.p,{children:"The agent should respond with a list of the connected tools.\nIt may also include built-in tools."}),"\n",(0,s.jsx)(h.Code,{codeConfig:p,northPanel:{tabs:[""],active:"",heightRatio:1},files:[{name:"",focus:"",code:{lines:[{tokens:[{content:"I use a combination of my built-in knowledge (up to June 2024) and a set of external tools to answer your questions. Here are the main types of tools I can use:",props:{}}]},{tokens:[{content:"Web Search & Content Fetching: I can fetch and summarize content from web pages, including crawling links recursively.",props:{}}]},{tokens:[{content:"News Search: I can search for recent news articles using Google News via RSS feeds.",props:{}}]},{tokens:[{content:"Calculator: I can perform arithmetic calculations and evaluate mathematical expressions.",props:{}}]},{tokens:[{content:"Date & Time: I can provide the current date and time in various time zones.",props:{}}]},{tokens:[{content:"These tools help me provide up-to-date information, perform calculations, and retrieve specific data from the internet when needed. If you have a specific question, let me know, and I'll use the most appropriate tool(s) to help!",props:{}}]}],lang:"text"},annotations:[]}]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["To test a specific tool, ask the agent a question that uses one of the tools, such as ",(0,s.jsx)(n.code,{children:"Summarize today's tech news"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To help you debug and test your flows, the ",(0,s.jsx)(n.strong,{children:"Playground"})," displays the agent's tool calls, the provided input, and the raw output the agent received before generating the summary.\nWith the given example, the agent should call the ",(0,s.jsx)(n.strong,{children:"News Search"})," component's ",(0,s.jsx)(n.code,{children:"search_news"})," action."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You've successfully created a basic agent flow that uses some generic tools."}),"\n",(0,s.jsxs)(n.p,{children:["To continue building on this tutorial, try connecting other tool components or ",(0,s.jsx)(n.a,{href:"/mcp-client",children:"use Langflow as an MCP client"})," to support more complex and specialized tasks."]}),"\n",(0,s.jsxs)(n.p,{children:["For a multi-agent example, see ",(0,s.jsx)(n.a,{href:"/agents-tools#use-an-agent-as-a-tool",children:"Use an agent as a tool"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"agent-component-parameters",children:"Agent component parameters"}),"\n",(0,s.jsxs)(n.p,{children:["You can configure the ",(0,s.jsx)(n.strong,{children:"Agent"})," component to use your preferred provider and model, custom instructions, and tools."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Many optional ",(0,s.jsx)(n.strong,{children:"Agent"})," component input parameters are hidden by default in the visual editor.\nYou can access all component parameters through the ",(0,s.jsx)(i.A,{name:"SlidersHorizontal","aria-hidden":"true"})," ",(0,s.jsx)(n.strong,{children:"Controls"})," in the ",(0,s.jsx)(n.a,{href:"/concepts-components#component-menus",children:"component's header menu"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"provider-and-model",children:"Provider and model"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.strong,{children:"Model Provider"})," (",(0,s.jsx)(n.code,{children:"agent_llm"}),") and ",(0,s.jsx)(n.strong,{children:"Model Name"})," (",(0,s.jsx)(n.code,{children:"llm_model"}),") settings to select the model provider and LLM that you want the agent to use."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Agent"})," component includes many models from several popular model providers.\nTo access other providers and models, set ",(0,s.jsx)(n.strong,{children:"Model Provider"})," to ",(0,s.jsx)(n.strong,{children:"Custom"}),", and then connect any ",(0,s.jsxs)(n.a,{href:"/components-models",children:[(0,s.jsx)(n.strong,{children:"Language Model"})," component"]}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you need to generate embeddings in your flow, use an ",(0,s.jsxs)(n.a,{href:"/components-embedding-models",children:[(0,s.jsx)(n.strong,{children:"Embedding Model"})," component"]}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"model-provider-api-key",children:"Model provider API key"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.strong,{children:"API Key"})," field, enter a valid authentication key for your selected model provider, if you are using a built-in provider.\nFor example, to use the default OpenAI model, you must provide a valid OpenAI API key for an OpenAI account that has credits and permission to call OpenAI LLMs."]}),"\n",(0,s.jsxs)(n.p,{children:["You can enter the key directly, but it is recommended that you follow industry best practices for storing and referencing API keys.\nFor example, you can use a ",(0,s.jsx)(i.A,{name:"Globe","aria-hidden":"true"})," ",(0,s.jsx)(n.a,{href:"/configuration-global-variables",children:"global variable"})," or ",(0,s.jsx)(n.a,{href:"/environment-variables",children:"environment variables"}),".\nFor more information, see ",(0,s.jsx)(n.a,{href:"/api-keys-and-authentication#component-api-keys",children:"Add component API keys to Langflow"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you select ",(0,s.jsx)(n.strong,{children:"Custom"})," as the model provider, authentication is handled in the incoming ",(0,s.jsx)(n.strong,{children:"Language Model"})," component."]}),"\n",(0,s.jsx)(n.h3,{id:"agent-instructions-and-input",children:"Agent instructions and input"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.strong,{children:"Agent Instructions"})," (",(0,s.jsx)(n.code,{children:"system_prompt"}),") field, you can provide custom instructions that you want the ",(0,s.jsx)(n.strong,{children:"Agent"})," component to use for every conversation."]}),"\n",(0,s.jsxs)(n.p,{children:["These instructions are applied in addition to the ",(0,s.jsx)(n.strong,{children:"Input"})," (",(0,s.jsx)(n.code,{children:"input_value"}),"), which can be entered directly or provided through another component, such as a ",(0,s.jsx)(n.strong,{children:"Chat Input"})," component."]}),"\n",(0,s.jsx)(n.h3,{id:"tools",children:"Tools"}),"\n",(0,s.jsx)(n.p,{children:"Agents are most useful when they have the appropriate tools available to complete requests."}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"Agent"})," component can use any Langflow component as a tool, including other agents and MCP servers."]}),"\n",(0,s.jsxs)(n.p,{children:["To attach a component as a tool, you must enable ",(0,s.jsx)(n.strong,{children:"Tool Mode"})," on the component that you want to attach, and then attach it to the ",(0,s.jsx)(n.strong,{children:"Agent"})," component's ",(0,s.jsx)(n.strong,{children:"Tools"})," port.\nFor more information, see ",(0,s.jsx)(n.a,{href:"/agents-tools",children:"Configure tools for agents"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["To allow agents to use tools from MCP servers, use the ",(0,s.jsxs)(n.a,{href:"/components-agents#mcp-connection",children:[(0,s.jsx)(n.strong,{children:"MCP Tools"})," component"]}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"agent-memory",children:"Agent memory"}),"\n",(0,s.jsx)(n.p,{children:"Langflow agents have built-in chat memory that is enabled by default.\nThis memory allows them to retrieve and reference messages from previous conversations, maintaining a rolling context window for each chat session ID."}),"\n",(0,s.jsxs)(n.p,{children:["Chat memories are grouped by ",(0,s.jsxs)(n.a,{href:"/session-id",children:["session ID (",(0,s.jsx)(n.code,{children:"session_id"}),")"]}),".\nIt is recommended to use custom session IDs if you need to segregate chat memory for different users or applications that run the same flow."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, the ",(0,s.jsx)(n.strong,{children:"Agent"})," component uses your Langflow installation's storage, and it retrieves a limited number of chat messages, which you can configure with the ",(0,s.jsx)(n.strong,{children:"Number of Chat History Messages"})," parameter."]}),"\n",(0,s.jsxs)(n.p,{children:["Although the ",(0,s.jsx)(n.strong,{children:"Message History"})," component isn't required for default chat memory, it provides more options for sorting, filtering, and limiting memories, and the ",(0,s.jsx)(n.strong,{children:"Message History"})," component is required to use external chat memory like Mem0."]}),"\n",(0,s.jsxs)(n.p,{children:["For more information, see ",(0,s.jsx)(n.a,{href:"/memory#store-chat-memory",children:"Store chat memory"})," and ",(0,s.jsxs)(n.a,{href:"/components-helpers#message-history",children:[(0,s.jsx)(n.strong,{children:"Message History"})," component"]}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"additional-parameters",children:"Additional parameters"}),"\n",(0,s.jsxs)(n.p,{children:["With the ",(0,s.jsx)(n.strong,{children:"Agent"})," component, the available parameters can change depending on the selected provider and model.\nFor example, some models support additional modes, arguments, or features like chat memory and temperature."]}),"\n",(0,s.jsx)(n.p,{children:"Some additional input parameters include the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Current Date"})," (",(0,s.jsx)(n.code,{children:"add_current_date_tool"}),"): When enabled (true), this setting adds a tool to the agent that can retrieve the current date."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle Parse Errors"})," (",(0,s.jsx)(n.code,{children:"handle_parsing_errors"}),"): When enabled (true), this setting allows the agent to fix errors, like typos, when analyzing user input."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verbose"})," (",(0,s.jsx)(n.code,{children:"verbose"}),"): When enabled (true), this setting records detailed logging output for debugging and analysis."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["To view and configure all parameters, click ",(0,s.jsx)(i.A,{name:"SlidersHorizontal","aria-hidden":"true"})," ",(0,s.jsx)(n.strong,{children:"Controls"})," in the ",(0,s.jsx)(n.a,{href:"/concepts-components#component-menus",children:"component's header menu"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"agent-component-output",children:"Agent component output"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Agent"})," component outputs a ",(0,s.jsx)(n.strong,{children:"Response"})," (",(0,s.jsx)(n.code,{children:"response"}),") that is ",(0,s.jsxs)(n.a,{href:"/data-types#message",children:[(0,s.jsx)(n.code,{children:"Message"})," data"]})," containing the agent's raw response to the query."]}),"\n",(0,s.jsxs)(n.p,{children:["Typically, this is passed to a ",(0,s.jsx)(n.strong,{children:"Chat Output"})," component to return the response in a human-readable format.\nIt can also be passed to other components if you need to process the response further before, or in addition to, returning it to the user."]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsxs)(n.a,{href:"/components-agents",children:[(0,s.jsx)(n.strong,{children:"Agent"})," and ",(0,s.jsx)(n.strong,{children:"MCP Tools"})," components"]})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/agents-tools",children:"Configure tools for agents"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);